// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: protos/database-server/operations.proto

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DatabaseOperationsService_GetRecords_FullMethodName   = "/operations.DatabaseOperationsService/GetRecords"
	DatabaseOperationsService_WriteRecord_FullMethodName  = "/operations.DatabaseOperationsService/WriteRecord"
	DatabaseOperationsService_UpdateRecord_FullMethodName = "/operations.DatabaseOperationsService/UpdateRecord"
	DatabaseOperationsService_DeleteRecord_FullMethodName = "/operations.DatabaseOperationsService/DeleteRecord"
)

// DatabaseOperationsServiceClient is the client API for DatabaseOperationsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseOperationsServiceClient interface {
	GetRecords(ctx context.Context, in *ReadQuery, opts ...grpc.CallOption) (*ReadResponse, error)
	WriteRecord(ctx context.Context, in *WriteQuery, opts ...grpc.CallOption) (*WriteResponse, error)
	UpdateRecord(ctx context.Context, in *UpdateQuery, opts ...grpc.CallOption) (*WriteResponse, error)
	DeleteRecord(ctx context.Context, in *ReadQuery, opts ...grpc.CallOption) (*WriteResponse, error)
}

type databaseOperationsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseOperationsServiceClient(cc grpc.ClientConnInterface) DatabaseOperationsServiceClient {
	return &databaseOperationsServiceClient{cc}
}

func (c *databaseOperationsServiceClient) GetRecords(ctx context.Context, in *ReadQuery, opts ...grpc.CallOption) (*ReadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadResponse)
	err := c.cc.Invoke(ctx, DatabaseOperationsService_GetRecords_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseOperationsServiceClient) WriteRecord(ctx context.Context, in *WriteQuery, opts ...grpc.CallOption) (*WriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, DatabaseOperationsService_WriteRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseOperationsServiceClient) UpdateRecord(ctx context.Context, in *UpdateQuery, opts ...grpc.CallOption) (*WriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, DatabaseOperationsService_UpdateRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseOperationsServiceClient) DeleteRecord(ctx context.Context, in *ReadQuery, opts ...grpc.CallOption) (*WriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WriteResponse)
	err := c.cc.Invoke(ctx, DatabaseOperationsService_DeleteRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseOperationsServiceServer is the server API for DatabaseOperationsService service.
// All implementations must embed UnimplementedDatabaseOperationsServiceServer
// for forward compatibility.
type DatabaseOperationsServiceServer interface {
	GetRecords(context.Context, *ReadQuery) (*ReadResponse, error)
	WriteRecord(context.Context, *WriteQuery) (*WriteResponse, error)
	UpdateRecord(context.Context, *UpdateQuery) (*WriteResponse, error)
	DeleteRecord(context.Context, *ReadQuery) (*WriteResponse, error)
	mustEmbedUnimplementedDatabaseOperationsServiceServer()
}

// UnimplementedDatabaseOperationsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDatabaseOperationsServiceServer struct{}

func (UnimplementedDatabaseOperationsServiceServer) GetRecords(context.Context, *ReadQuery) (*ReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecords not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) WriteRecord(context.Context, *WriteQuery) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteRecord not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) UpdateRecord(context.Context, *UpdateQuery) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecord not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) DeleteRecord(context.Context, *ReadQuery) (*WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRecord not implemented")
}
func (UnimplementedDatabaseOperationsServiceServer) mustEmbedUnimplementedDatabaseOperationsServiceServer() {
}
func (UnimplementedDatabaseOperationsServiceServer) testEmbeddedByValue() {}

// UnsafeDatabaseOperationsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseOperationsServiceServer will
// result in compilation errors.
type UnsafeDatabaseOperationsServiceServer interface {
	mustEmbedUnimplementedDatabaseOperationsServiceServer()
}

func RegisterDatabaseOperationsServiceServer(s grpc.ServiceRegistrar, srv DatabaseOperationsServiceServer) {
	// If the following call pancis, it indicates UnimplementedDatabaseOperationsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DatabaseOperationsService_ServiceDesc, srv)
}

func _DatabaseOperationsService_GetRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseOperationsServiceServer).GetRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseOperationsService_GetRecords_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseOperationsServiceServer).GetRecords(ctx, req.(*ReadQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseOperationsService_WriteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseOperationsServiceServer).WriteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseOperationsService_WriteRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseOperationsServiceServer).WriteRecord(ctx, req.(*WriteQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseOperationsService_UpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseOperationsServiceServer).UpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseOperationsService_UpdateRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseOperationsServiceServer).UpdateRecord(ctx, req.(*UpdateQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseOperationsService_DeleteRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseOperationsServiceServer).DeleteRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseOperationsService_DeleteRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseOperationsServiceServer).DeleteRecord(ctx, req.(*ReadQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseOperationsService_ServiceDesc is the grpc.ServiceDesc for DatabaseOperationsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseOperationsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "operations.DatabaseOperationsService",
	HandlerType: (*DatabaseOperationsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecords",
			Handler:    _DatabaseOperationsService_GetRecords_Handler,
		},
		{
			MethodName: "WriteRecord",
			Handler:    _DatabaseOperationsService_WriteRecord_Handler,
		},
		{
			MethodName: "UpdateRecord",
			Handler:    _DatabaseOperationsService_UpdateRecord_Handler,
		},
		{
			MethodName: "DeleteRecord",
			Handler:    _DatabaseOperationsService_DeleteRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/database-server/operations.proto",
}
